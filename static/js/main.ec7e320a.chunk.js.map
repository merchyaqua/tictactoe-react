{"version":3,"sources":["App.js","index.js"],"names":["Square","_ref","highlighted","value","onSquareClick","React","createElement","className","onClick","Board","_ref2","xIsNext","squares","onPlay","win","calculateWinner","winner","winsquares","status","handleClick","i","nextSquares","slice","rows","row","s","j","cls","includes","push","key","Fragment","lines","final","fullcount","length","a","b","c","Game","history","setHistory","useState","Array","fill","currentMove","setCurrentMove","historyOrder","setHistoryOrder","currentSquares","movesButtons","map","move","descript","nextMove","jumpTo","reverse","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.ec7e320a.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport React from \"react\";\n\n\nfunction Square({ highlighted, value, onSquareClick }) {\n  return (\n    <button className={\"square \" + highlighted} onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay }) {\n  // const [squares, setSquares] = useState(Array(9).fill(null));\n  const win = calculateWinner(squares);\n  const winner = win.winner;\n  const winsquares = win.winsquares;\n  let status;\n  if (winner === \"draw\") {\n    status = \"Draw\";\n  } else if (winner) {\n    status = \"Winner : \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  function handleClick(i) {\n    const nextSquares = squares.slice();\n    // history.push(nextSquares);\n    if (nextSquares[i] || calculateWinner(nextSquares).winner) {\n      // already exists\n      return;\n    }\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n\n    onPlay(nextSquares); // re-renders here\n  }\n\n  const rows = [];\n  for (let i = 0; i < 3; i++) {\n    let row = [];\n    let s = [];\n    for (let j = 0; j < 3; j++) {\n      let cls = \"\";\n      if (winner) {\n        // console.log(\"get it \");\n        if (winsquares.includes(j + i * 3)) {\n          cls = \"highlighted\";\n        }\n      }\n      s.push(\n        <Square\n          highlighted={cls}\n          key={j + i * 3}\n          value={squares[j + i * 3]}\n          onSquareClick={() => handleClick(j + i * 3)}\n        />\n      );\n    }\n    row.push(\n      <div key={\"row\" + i} className=\"board-row\">\n        {s}\n      </div>\n    );\n    rows.push(row);\n  }\n  return (\n    <>\n      <div className=\"status\">{status}</div>\n      {rows}\n    </>\n  );\n}\n\n\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  let final = {\n    winner: null,\n    winsquares: [],\n  };\n  let fullcount = 0;\n  for (let i = 0; i < 9; i++) {\n    if (squares[i] !== null) {\n      fullcount++;\n    }\n  }\n  if (fullcount === 9) {\n    final.winner = \"draw\";\n  }\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    // if not null.\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      final.winner = squares[a];\n      final.winsquares = [a, b, c];\n      // console.log(final.winsquares);\n    }\n  }\n  return final;\n}\n\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const [historyOrder, setHistoryOrder] = useState(true); // true for ascending\n  const currentSquares = history[currentMove];\n  const xIsNext = currentMove % 2 === 0;\n\n  function handleReset(){ // resets board state\n    setHistory([Array(9).fill(null)]);\n    setCurrentMove(0);\n  }\n\n  function handlePlay(nextSquares) {\n    setHistory([...history.slice(0, currentMove + 1), nextSquares]);\n    setCurrentMove(currentMove + 1);\n    // setXIsNext(!xIsNext);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    // setXIsNext(nextMove % 2 === 0);\n  }\n\n\n  // generate a bunch of buttons\n  let movesButtons = history.map((squares, move) => {\n    let descript; // move is the index of squares\n\n    if (move > 0) {\n      descript = \"Go to move #\" + move;\n    } else {\n      descript = \"Go to game start\";\n    }\n    return !(move === currentMove) ? (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{descript}</button>\n      </li>\n    ) : (\n      // this button helps call jumpto move\n      <li key={move}>You are at move #{move}.</li>\n    );\n  });\n\n\n  if (historyOrder === false) {\n    movesButtons = movesButtons.reverse();\n  }\n\n\n  \n  // console.log(historyOrder);\n  // initially a state of an empty game\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <button onClick={handleReset}>Reset</button>\n        <button onClick={() => setHistoryOrder(!historyOrder)}>\n          {historyOrder ? \" ascending history\" : \" descending history\"}\n        </button>\n        <ul>{movesButtons}</ul>\n      </div>\n    </div>\n  );\n}\n","import React, { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport \"./styles.css\";\n\nimport App from \"./App\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);"],"sourceRoot":""}